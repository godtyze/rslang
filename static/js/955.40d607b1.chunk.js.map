{"version":3,"file":"static/js/955.40d607b1.chunk.js","mappings":"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","sources":["components/navigation.tsx","components/UI/sound-icon/sound-icon.tsx","components/word-card/word-card.tsx","pages/glossary/word-list.tsx","components/UI/input/input.tsx","components/UI/pagination/pagination.tsx","components/UI/mySelect/mySelect.tsx","pages/glossary/glossary.tsx"],"sourcesContent":["import React from 'react';\nimport GameLink from \"../pages/main/game-link\";\nimport audioCallImg from \"../assets/png/speaker.png\";\nimport sprintImg from \"../assets/png/sprint.png\";\n\n\nconst Navigation: React.FC = () => {\n  return (\n      <nav className='header__nav nav'>\n        <GameLink\n            className=''\n            path='/audio-call'\n            img={audioCallImg}\n            width='50px'\n            height='50px'\n            name='Аудиовызов'\n        />\n        <GameLink\n            className=''\n            path='/sprint'\n            img={sprintImg}\n            width='100px'\n            height='60px'\n            name='Спринт'\n        />\n      </nav>\n  );\n};\n\nexport default Navigation;\n","import React from 'react';\nimport soundImg from '../../../assets/png/voice-icon.png';\nimport './sound-icon.css';\n\ntype VoiceIconProps = {\n  onClick: () => void;\n}\n\nconst SoundIcon: React.FC<VoiceIconProps> = ({onClick}) => {\n  return (\n    <>\n      <img className='sound'\n           onClick={onClick}\n           src={soundImg}\n           alt='sound-icon'/>\n    </>\n  );\n};\n\nexport default SoundIcon;","import React, {useState} from 'react';\nimport './word-card.css';\nimport {Word} from \"../../types/types\";\nimport {server} from \"../../consts/consts\";\nimport { FastAverageColor } from 'fast-average-color';\nimport SoundIcon from \"../UI/sound-icon/sound-icon\";\n\ntype wordCardProps = Omit<Word, 'id' | 'page' | 'group'>;\ntype averageColor = {\n  color: string;\n  isLight: boolean;\n}\n\nconst fac = new FastAverageColor();\n\nconst WordCard: React.FC<wordCardProps> = ({word,\n                                             image,\n                                             audio,\n                                             audioExample,\n                                             audioMeaning,\n                                             wordTranslate,\n                                             textMeaningTranslate,\n                                             textMeaning,\n                                             textExample,\n                                             transcription,\n                                             textExampleTranslate}) => {\n  const [averageColorData, setAverageColorData] = useState<averageColor>({ color: '', isLight: false });\n  fac.getColorAsync(`${server}${image}`).then(color => {\n    setAverageColorData({\n      color: color.rgb,\n      isLight: color.isLight,\n    });\n  });\n\n\n  const audioPlayer = new Audio();\n  const playWord = async (url: string, phase?: number) => {\n    audioPlayer.src = `${server}${url}`;\n    audioPlayer.load();\n    await audioPlayer.play();\n\n    let nextPhase: number;\n    let nextAudio: string;\n\n    if (phase === 1) {\n      nextPhase = 2;\n      nextAudio = audioMeaning;\n    }\n\n    if (phase === 2) {\n      nextPhase = 3;\n      nextAudio = audioExample;\n    }\n\n    if (phase === 3) {\n      return;\n    }\n\n    const playNext = () => {\n      audioPlayer.removeEventListener('ended', playNext);\n      playWord(nextAudio, nextPhase);\n    };\n\n    audioPlayer.addEventListener('ended', playNext);\n  };\n\n  return (\n    <div className='word__card card' style={{background: `${averageColorData.color}`}}>\n      <div className='card__main' style={{background: `url(${server}${image})`}}>\n        <div className='card__main-wrapper' style={{background: `linear-gradient(transparent, ${averageColorData.color})`}}>\n          <h3 className='card__header'>{word}</h3>\n          <div className='card__header-details'>\n            <span>{wordTranslate}</span>\n            <span>{transcription}</span>\n            <SoundIcon onClick={() => playWord(audio, 1)}/>\n          </div>\n        </div>\n      </div>\n      <div className='card__description'>\n        <div className='card__description-examples'>\n          <span dangerouslySetInnerHTML={{__html: textMeaning}}></span>\n          <span dangerouslySetInnerHTML={{__html: textExample}}></span>\n        </div>\n        <div className='card__description-translate'>\n          <span>{textMeaningTranslate}</span>\n          <span>{textExampleTranslate}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WordCard;","import React from 'react';\nimport WordCard from \"../../components/word-card/word-card\";\nimport './word-list.css';\nimport {useAppSelector} from \"../../hooks/redux\";\n\nconst WordList: React.FC = () => {\n  const words = useAppSelector(state => state.glossaryReducer.words);\n\n  return (\n    <div className='word__cards'>\n      {words.map(word =>\n      <WordCard\n        key={word.word}\n        word={word.word}\n        image={word.image}\n        audio={word.audio}\n        audioMeaning={word.audioMeaning}\n        audioExample={word.audioExample}\n        textMeaning={word.textMeaning}\n        textExample={word.textExample}\n        transcription={word.transcription}\n        wordTranslate={word.wordTranslate}\n        textMeaningTranslate={word.textMeaningTranslate}\n        textExampleTranslate={word.textExampleTranslate}/>)}\n    </div>\n  );\n};\n\nexport default WordList;","import React from 'react';\n\ninterface inputProps {\n  name?: string;\n  value: string;\n  id?: string;\n  className: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onSubmit?: (e: React.FormEvent<HTMLInputElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;\n  type: string;\n  placeholder?: string;\n  autoComplete?: string;\n  autoFocus?: boolean\n  onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void\n}\n\nconst MyInput: React.FC<inputProps> = ({className,\n                                         type,\n                                         placeholder,\n                                         onChange,\n                                         name,\n                                         onBlur,\n                                         autoComplete,\n                                         onKeyDown,\n                                         id,\n                                         autoFocus,\n                                         value}) => {\n  const handleSubmit = (e:React.FormEvent<HTMLInputElement>) => {\n    e.preventDefault();\n  }\n  return (\n    <input onSubmit={handleSubmit}\n           id={id}\n           onBlur={onBlur}\n           name={name}\n           onChange={onChange}\n           className={className}\n           type={type}\n           onKeyDown={onKeyDown}\n           autoComplete={autoComplete}\n           autoFocus={autoFocus}\n           value={value}\n           placeholder={placeholder}>\n    </input>\n  );\n};\n\nexport default MyInput;\n","import React, {useState} from 'react';\nimport './pagination.css';\nimport MyButton from \"../button/button\";\nimport {useNavigate, useParams} from \"react-router-dom\";\nimport {glossaryParams} from \"../../../types/types\";\nimport MyInput from \"../input/input\";\nimport {useActions} from \"../../../hooks/useActions\";\nimport {useAppSelector} from \"../../../hooks/redux\";\n\nconst Pagination: React.FC = () => {\n  const {isLoading, currentGroup, currentPage} = useAppSelector(state => state.glossaryReducer);\n  const {setPage} = useActions();\n  const { group } = useParams<glossaryParams>();\n  const navigate = useNavigate();\n\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [value, setValue] = useState<string>(`${currentPage}`)\n\n  let previousPageValue = currentPage;\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (+e.target.value <= 30 && e.target.value !== '0') setValue(e.target.value);\n  };\n\n  const onClickFirst = () => {\n    setPage(1);\n    navigate(`/glossary/${currentGroup}/1`);\n  };\n\n  const onClickPrev = () => {\n    setPage(currentPage - 1);\n    navigate(`/glossary/${currentGroup}/${currentPage - 1}`);\n  };\n\n  const onClickNext = () => {\n    setPage(currentPage + 1);\n    navigate(`/glossary/${currentGroup}/${currentPage + 1}`);\n  };\n\n  const onClickLast = () => {\n    setPage(30);\n    navigate(`/glossary/${currentGroup}/30`);\n  };\n\n  const onBlur = () => {\n    setEditMode(false);\n\n    if (!value) {\n      setValue(`${previousPageValue}`);\n      return;\n    }\n\n    if (+value !== previousPageValue) {\n      setPage(+value);\n      navigate(`/glossary/${group}/${value}`);\n    }\n  };\n\n  const onEnter = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.code === 'Enter' && editMode) {\n      setEditMode(false);\n\n      if (!value) {\n        setValue(`${previousPageValue}`);\n        return;\n      }\n\n      if (+value !== previousPageValue) {\n        setPage(+value);\n        navigate(`/glossary/${group}/${value}`);\n      }\n    }\n  };\n\n  return (\n    <div className='pagination'>\n      <MyButton\n        className='arr-wrapper'\n        visible={true}\n        disabled={isLoading || currentPage === 1}\n        onClick={() => {\n          setValue('1');\n          onClickFirst();\n        }}>&lt;&lt;</MyButton>\n      <MyButton\n        className='arr-wrapper'\n        disabled={isLoading || currentPage === 1}\n        visible={true}\n        onClick={() => {\n          setValue(prev => `${+prev - 1}`)\n          onClickPrev();\n        }}>&lt;</MyButton>\n      {!editMode &&\n          <label\n              htmlFor='page'\n              onClick={() => setEditMode(true)}\n              className='arr-wrapper page'>\n            {currentPage}\n          </label>}\n      {editMode && <MyInput\n        type='text'\n        id='page'\n        className='arr-wrapper page'\n        value={value}\n        onChange={onChange}\n        onBlur={onBlur}\n        autoFocus={true}\n        onKeyDown={onEnter}\n        autoComplete='off'\n        ></MyInput>}\n      <MyButton\n        className='arr-wrapper'\n        disabled={isLoading || currentPage === 30}\n        visible={true}\n        onClick={onClickNext}>&gt;</MyButton>\n      <MyButton\n        className='arr-wrapper'\n        disabled={isLoading || currentPage === 30}\n        visible={true}\n        onClick={onClickLast}>&gt;&gt;</MyButton>\n    </div>\n  );\n};\n\nexport default Pagination;","import React, {useMemo} from 'react';\nimport {useAppSelector} from \"../../../hooks/redux\";\nimport {Select} from \"antd\";\nimport {useActions} from \"../../../hooks/useActions\";\nimport {useNavigate} from \"react-router-dom\";\nimport './mySelect.css';\n\nconst MySelect: React.FC = () => {\n  const isAuth = useAppSelector(state => state.userReducer.isAuth);\n  const currentGroup = useAppSelector(state => state.glossaryReducer.currentGroup);\n  const {setGroup} = useActions();\n  const navigate = useNavigate();\n\n  const options = useMemo(() => [\n    { value: '1', label: '1 группа слов' },\n    { value: '2', label: '2 группа слов' },\n    { value: '3', label: '3 группа слов' },\n    { value: '4', label: '4 группа слов'},\n    { value: '5', label: '5 группа слов'},\n    { value: '6', label: '6 группа слов'},\n    { value: 'Сложные', label: 'Сложные слова', disabled: !isAuth},\n  ], [isAuth]);\n\n  const handleChange = (value: string) => {\n    if (!isNaN(+value)) {\n      setGroup(+value);\n      navigate(`/glossary/${value}/1`);\n    } else {\n      return;\n    }\n  };\n\n  return (\n    <Select\n      className='dropdown'\n      defaultValue={`${currentGroup}`}\n      size='large'\n      style={{ width: 250 }}\n      onChange={handleChange}\n      options={options}\n    />\n  );\n};\n\nexport default MySelect;","import React, {useEffect} from 'react';\nimport Header from \"../../components/header/header\";\nimport {Link, useNavigate, useParams} from \"react-router-dom\";\nimport sprite from '../../assets/svg/sprite.svg';\nimport Navigation from \"../../components/navigation\";\nimport WordList from \"./word-list\";\nimport {glossaryParams} from \"../../types/types\";\nimport Pagination from \"../../components/UI/pagination/pagination\";\nimport Footer from \"../../components/footer/footer\";\nimport MySelect from \"../../components/UI/mySelect/mySelect\";\nimport Loader from \"../../components/Loader/loader\";\nimport {useAppSelector} from \"../../hooks/redux\";\nimport {useActions} from \"../../hooks/useActions\";\nimport './glossary.css';\n\nconst Glossary: React.FC = () => {\n  const isLoading = useAppSelector(state => state.glossaryReducer.isLoading);\n  const {setPage, setGroup, loadWords} = useActions();\n  const {group, page} = useParams<glossaryParams>();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (isNaN(Number(group)) || isNaN(Number(page))) {\n      navigate('/glossary/1/1');\n      return;\n    }\n\n    if (group && page && (+group > 6 || +page < 1 || +page > 30)) {\n      navigate('/glossary/1/1');\n      return;\n    }\n\n    if (group && page) {\n      setGroup(+group);\n      setPage(+page);\n      loadWords(+group - 1, +page - 1);\n    }\n\n  }, [group, page]);\n\n  return (\n    <div className='App glossary'>\n      <Header className='header glossary'>\n        <Link to='/'>\n          <svg className='header__link-icon'>\n            <use xlinkHref={`${sprite}#home-icon`}/>\n          </svg>\n        </Link>\n        <Navigation/>\n      </Header>\n      <div className='words__wrapper'>\n        {isLoading\n          ? <Loader/>\n          : <div className='word__list'>\n              <MySelect/>\n              <WordList/>\n            </div>\n        }\n      </div>\n      <Pagination/>\n      <Footer/>\n    </div>\n  );\n};\n\nexport default Glossary;\n"],"names":["className","path","img","audioCallImg","width","height","name","sprintImg","onClick","src","soundImg","alt","fac","FastAverageColor","word","image","audio","audioExample","audioMeaning","wordTranslate","textMeaningTranslate","textMeaning","textExample","transcription","textExampleTranslate","useState","color","isLight","averageColorData","setAverageColorData","getColorAsync","server","then","rgb","audioPlayer","Audio","playWord","url","phase","load","play","nextPhase","nextAudio","playNext","removeEventListener","addEventListener","style","background","dangerouslySetInnerHTML","__html","words","useAppSelector","state","glossaryReducer","map","type","placeholder","onChange","onBlur","autoComplete","onKeyDown","id","autoFocus","value","onSubmit","e","preventDefault","isLoading","currentGroup","currentPage","setPage","useActions","group","useParams","navigate","useNavigate","editMode","setEditMode","setValue","previousPageValue","visible","disabled","prev","htmlFor","target","code","isAuth","userReducer","setGroup","options","useMemo","label","defaultValue","size","isNaN","loadWords","page","useEffect","Number","to","xlinkHref","sprite"],"sourceRoot":""}
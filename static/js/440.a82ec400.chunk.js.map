{"version":3,"file":"static/js/440.a82ec400.chunk.js","mappings":"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","sources":["components/navigation.tsx","components/UI/sound-icon/sound-icon.tsx","components/word-card/word-card.tsx","pages/glossary/word-list.tsx","components/UI/mySelect/mySelect.tsx","components/UI/myPagination/myPagination.tsx","pages/glossary/glossary.tsx"],"sourcesContent":["import React from 'react';\nimport GameLink from \"../pages/main/game-link\";\nimport audioCallImg from \"../assets/png/speaker.png\";\nimport sprintImg from \"../assets/png/sprint.png\";\n\n\nconst Navigation: React.FC = () => {\n  return (\n      <nav className='header__nav nav'>\n        <GameLink\n            className=''\n            path='/audio-call'\n            img={audioCallImg}\n            width='50px'\n            height='50px'\n            name='Аудиовызов'\n        />\n        <GameLink\n            className=''\n            path='/sprint'\n            img={sprintImg}\n            width='100px'\n            height='60px'\n            name='Спринт'\n        />\n      </nav>\n  );\n};\n\nexport default Navigation;\n","import React from 'react';\nimport soundImg from '../../../assets/png/voice-icon.png';\nimport './sound-icon.css';\n\ntype VoiceIconProps = {\n  onClick: () => void;\n}\n\nconst SoundIcon: React.FC<VoiceIconProps> = ({onClick}) => {\n  return (\n    <>\n      <img className='sound'\n           onClick={onClick}\n           src={soundImg}\n           alt='sound-icon'/>\n    </>\n  );\n};\n\nexport default SoundIcon;","import React, {useState} from 'react';\nimport './word-card.css';\nimport {Word} from \"../../types/types\";\nimport {server} from \"../../consts/consts\";\nimport { FastAverageColor } from 'fast-average-color';\nimport SoundIcon from \"../UI/sound-icon/sound-icon\";\n\ntype wordCardProps = Omit<Word, 'id' | 'page' | 'group'>;\ntype averageColor = {\n  color: string;\n  isLight: boolean;\n}\n\nconst fac = new FastAverageColor();\n\nconst WordCard: React.FC<wordCardProps> = ({word,\n                                             image,\n                                             audio,\n                                             audioExample,\n                                             audioMeaning,\n                                             wordTranslate,\n                                             textMeaningTranslate,\n                                             textMeaning,\n                                             textExample,\n                                             transcription,\n                                             textExampleTranslate}) => {\n  const [averageColorData, setAverageColorData] = useState<averageColor>({ color: '', isLight: false });\n  fac.getColorAsync(`${server}${image}`).then(color => {\n    setAverageColorData({\n      color: color.rgb,\n      isLight: color.isLight,\n    });\n  });\n\n\n  const audioPlayer = new Audio();\n  const playWord = async (url: string, phase?: number) => {\n    audioPlayer.src = `${server}${url}`;\n    audioPlayer.load();\n    await audioPlayer.play();\n\n    let nextPhase: number;\n    let nextAudio: string;\n\n    if (phase === 1) {\n      nextPhase = 2;\n      nextAudio = audioMeaning;\n    }\n\n    if (phase === 2) {\n      nextPhase = 3;\n      nextAudio = audioExample;\n    }\n\n    if (phase === 3) {\n      return;\n    }\n\n    const playNext = () => {\n      audioPlayer.removeEventListener('ended', playNext);\n      playWord(nextAudio, nextPhase);\n    };\n\n    audioPlayer.addEventListener('ended', playNext);\n  };\n\n  return (\n    <div className='word__card card' style={{background: `${averageColorData.color}`}}>\n      <div className='card__main' style={{background: `url(${server}${image})`}}>\n        <div className='card__main-wrapper' style={{background: `linear-gradient(transparent, ${averageColorData.color})`}}>\n          <h3 className='card__header'>{word}</h3>\n          <div className='card__header-details'>\n            <span>{wordTranslate}</span>\n            <span>{transcription}</span>\n            <SoundIcon onClick={() => playWord(audio, 1)}/>\n          </div>\n        </div>\n      </div>\n      <div className='card__description'>\n        <div className='card__description-examples'>\n          <span dangerouslySetInnerHTML={{__html: textMeaning}}></span>\n          <span dangerouslySetInnerHTML={{__html: textExample}}></span>\n        </div>\n        <div className='card__description-translate'>\n          <span>{textMeaningTranslate}</span>\n          <span>{textExampleTranslate}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WordCard;","import React from 'react';\nimport WordCard from \"../../components/word-card/word-card\";\nimport {useAppSelector} from \"../../hooks/redux\";\nimport './word-list.css';\n\nconst WordList: React.FC = () => {\n  const words = useAppSelector(state => state.glossaryReducer.words);\n\n  return (\n    <div className='word-cards'>\n      {words.map(word =>\n      <WordCard\n        key={word.word}\n        word={word.word}\n        image={word.image}\n        audio={word.audio}\n        audioMeaning={word.audioMeaning}\n        audioExample={word.audioExample}\n        textMeaning={word.textMeaning}\n        textExample={word.textExample}\n        transcription={word.transcription}\n        wordTranslate={word.wordTranslate}\n        textMeaningTranslate={word.textMeaningTranslate}\n        textExampleTranslate={word.textExampleTranslate}/>)}\n    </div>\n  );\n};\n\nexport default WordList;","import React, {useMemo} from 'react';\nimport {useAppSelector} from \"../../../hooks/redux\";\nimport {Select} from \"antd\";\nimport {useNavigate} from \"react-router-dom\";\nimport './mySelect.css';\n\nconst MySelect: React.FC = () => {\n  const isAuth = useAppSelector(state => state.userReducer.isAuth);\n  const isLoading = useAppSelector(state => state.glossaryReducer.isLoading);\n  const currentGroup = useAppSelector(state => state.glossaryReducer.currentGroup);\n  const navigate = useNavigate();\n\n  const options = useMemo(() => [\n    { value: '1', label: '1 группа слов' },\n    { value: '2', label: '2 группа слов' },\n    { value: '3', label: '3 группа слов' },\n    { value: '4', label: '4 группа слов'},\n    { value: '5', label: '5 группа слов'},\n    { value: '6', label: '6 группа слов'},\n    { value: 'Сложные', label: 'Сложные слова', disabled: !isAuth},\n  ], [isAuth]);\n\n  const handleChange = (value: string) => {\n    if (!isNaN(+value)) {\n      navigate(`/glossary/${value}/1`);\n    } else {\n      return;\n    }\n  };\n\n  return (\n    <Select\n      className='dropdown'\n      value={`${currentGroup}`}\n      size='large'\n      disabled={isLoading}\n      onChange={handleChange}\n      options={options}\n    />\n  );\n};\n\nexport default MySelect;","import React from 'react';\r\nimport { Pagination } from 'antd';\r\nimport {useAppSelector} from '../../../hooks/redux';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport './myPagination.css';\r\n\r\nconst MyPagination: React.FC = () => {\r\n  const {isLoading, currentGroup, currentPage} = useAppSelector(state => state.glossaryReducer);\r\n  const navigate = useNavigate();\r\n\r\n  const onChange = (page: number) => {\r\n    navigate(`/glossary/${currentGroup}/${page}`);\r\n  };\r\n\r\n  return (\r\n    <div className='pagination'>\r\n      <Pagination\r\n        current={currentPage}\r\n        disabled={isLoading}\r\n        total={600}\r\n        responsive={true}\r\n        showSizeChanger={false}\r\n        pageSize={20}\r\n        onChange={onChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyPagination;","import React, {useEffect} from 'react';\nimport Header from \"../../components/header/header\";\nimport {Link, useNavigate, useParams} from \"react-router-dom\";\nimport sprite from '../../assets/svg/sprite.svg';\nimport Navigation from \"../../components/navigation\";\nimport WordList from \"./word-list\";\nimport {glossaryParams} from \"../../types/types\";\nimport Footer from \"../../components/footer/footer\";\nimport MySelect from \"../../components/UI/mySelect/mySelect\";\nimport Loader from \"../../components/Loader/loader\";\nimport {useAppSelector} from \"../../hooks/redux\";\nimport {useActions} from \"../../hooks/useActions\";\nimport MyPagination from \"../../components/UI/myPagination/myPagination\";\nimport './glossary.css';\nimport {isSafari} from \"../../utils/utils\";\n\nconst Glossary: React.FC = () => {\n  const {isLoading} = useAppSelector(state => state.glossaryReducer);\n  const {setPage, setGroup, loadWords} = useActions();\n  const {group, page} = useParams<glossaryParams>();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (group && !isNaN(+group)) {\n      setGroup(+group);\n    }\n  }, [group]);\n\n  useEffect(() => {\n    if (page && !isNaN(+page)) {\n      setPage(+page);\n    }\n  }, [page]);\n\n  useEffect(() => {\n    if (isNaN(Number(group)) || isNaN(Number(page))) {\n      navigate('/glossary/1/1');\n      return;\n    }\n\n    if (group && page && (+group > 6 || +page < 1 || +page > 30)) {\n      navigate('/glossary/1/1');\n      return;\n    }\n\n    if (group && page) loadWords(+group - 1, +page - 1);\n  }, [group, page]);\n\n  return (\n    <div className='App glossary'>\n      <Header className='header glossary'>\n        <Link to='/'>\n          <svg className='header__link-icon'>\n            <use xlinkHref={`${sprite}#home-icon`}/>\n          </svg>\n        </Link>\n        <Navigation/>\n      </Header>\n      <MySelect/>\n      <div className={isSafari() ? 'words__wrapper safari' : 'words__wrapper'}>\n        {isLoading\n          ? <Loader/>\n          : <WordList/>\n        }\n      </div>\n      <MyPagination/>\n      <Footer/>\n    </div>\n  );\n};\n\nexport default Glossary;\n"],"names":["className","path","img","audioCallImg","width","height","name","sprintImg","onClick","src","soundImg","alt","fac","FastAverageColor","word","image","audio","audioExample","audioMeaning","wordTranslate","textMeaningTranslate","textMeaning","textExample","transcription","textExampleTranslate","useState","color","isLight","averageColorData","setAverageColorData","getColorAsync","server","then","rgb","audioPlayer","Audio","playWord","url","phase","load","play","nextPhase","nextAudio","playNext","removeEventListener","addEventListener","style","background","dangerouslySetInnerHTML","__html","words","useAppSelector","state","glossaryReducer","map","isAuth","userReducer","isLoading","currentGroup","navigate","useNavigate","options","useMemo","value","label","disabled","size","onChange","isNaN","currentPage","current","total","responsive","showSizeChanger","pageSize","page","useActions","setPage","setGroup","loadWords","useParams","group","useEffect","Number","to","xlinkHref","sprite","isSafari"],"sourceRoot":""}
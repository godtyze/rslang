{"version":3,"file":"static/js/282.bbc02359.chunk.js","mappings":"iLAEaA,EAAc,SAACC,GAC1B,OAA0BC,EAAAA,EAAAA,UAAiB,IAA3C,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAkB,GAApD,eAAOG,EAAP,KAAkBC,EAAlB,KAEMC,EAAQ,yCAAG,mGAEbD,GAAa,GAFA,SAGPL,IAHO,sDAKbG,EAAS,KAAaI,SALT,uBAObF,GAAa,GAPA,0EAAH,qDAWd,MAAO,CAACC,EAAUF,EAAWF,EAC9B,C,sOCDKM,EAAS,CAAC,CAACC,KAAM,qDAAcC,MAAO,SAAU,CAACD,KAAM,wCAAWC,MAAO,UAEzEC,EAAS,CACb,CAACC,OAAQ,EAAGC,M,ivQAAgBC,OAAQ,QACpC,CAACF,OAAQ,EAAGC,M,6nWAAgBC,OAAQ,qBACpC,CAACF,OAAQ,EAAGC,M,i5OAAgBC,OAAQ,qBACpC,CAACF,OAAQ,EAAGC,M,quVAAgBC,OAAQ,sBA8ItC,EAvIwC,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACxC,GAA0Bd,EAAAA,EAAAA,UAAsB,IAAhD,eAAOe,EAAP,KAAcC,EAAd,KACA,GAAkChB,EAAAA,EAAAA,UAAwB,IAA1D,eAAOiB,EAAP,KAAkBC,EAAlB,KACA,GAAwClB,EAAAA,EAAAA,UAAiB,GAAzD,eAAOmB,EAAP,KAAqBC,EAArB,KACA,GAA8BpB,EAAAA,EAAAA,WAAkB,GAAhD,eAAOqB,EAAP,KAAgBC,EAAhB,KACA,GAAsCtB,EAAAA,EAAAA,UAAiB,IAAvD,eAAOuB,EAAP,KAAoBC,EAApB,KACA,GAAwDxB,EAAAA,EAAAA,UAAiB,IAAzE,eAAOyB,EAAP,KAA6BC,EAA7B,KACA,GAA4B1B,EAAAA,EAAAA,UAAiB,GAA7C,eAAO2B,EAAP,KAAeC,EAAf,KACA,GAA4B5B,EAAAA,EAAAA,UAAiB,GAA7C,eAAOW,EAAP,KAAekB,EAAf,KACA,GAAwB7B,EAAAA,EAAAA,UAAiB,IAAzC,eAAO8B,GAAP,KAAaC,GAAb,KAEMC,GAAsB,SAACjB,GAC3BS,EAAeT,EAAMI,GAAcc,MACnC,IAAMC,GAASC,EAAAA,EAAAA,IAAiB,GAE9BT,EADa,IAAXQ,EACsBnB,EAAMI,GAAciB,cACfrB,GAAMoB,EAAAA,EAAAA,IAAiB,KAAKC,cAC5D,EAoBD,IAAqBtC,EAAAA,EAAAA,IAAW,uBAAC,kGACzBuC,GAAaF,EAAAA,EAAAA,IAAiB,IADL,SAEXG,EAAAA,EAAAA,SAAqBxB,EAAMuB,GAFhB,cAEzBtB,EAFyB,YAG/BC,EAH+B,KAGtBD,EAHsB,SAGHuB,EAAAA,EAAAA,SAAqBD,EAAa,EAAGvB,GAHlC,oCAGhByB,OAHgB,0BAGsDD,EAAAA,EAAAA,SAAqBD,EAAa,EAAGvB,GAH3F,8BAGyCyB,OAHzC,4EAA1BC,IAAP,gBAyBA,OAlBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQC,YAAW,WACnBb,GAAO,EACTC,GAAQD,GAAO,GACVR,GAAW,EACnB,GAAE,KACH,OAAO,kBAAMsB,aAAaF,EAAnB,CACR,GAAE,CAACZ,MAEJW,EAAAA,EAAAA,YAAU,WACRE,YAAW,kBAAMX,GAAoBjB,EAA1B,GAAkC,GAC7CK,EAAgBD,EAAe,EAChC,GAAE,CAACJ,KAEJ0B,EAAAA,EAAAA,YAAU,WACPD,IACF,GAAE,KAGC,iBAAKK,UAAU,qBAAf,UACGxB,IAEC,iBAAKwB,UAAU,gBAAf,WACE,iBAAMC,MAAO,CAACC,MAAO,WAAYF,UAAU,aAA3C,qGACA,iBAAKA,UAAU,YAAf,WACE,kBAAMC,MAAO,CAACC,MAAO,WAAYF,UAAU,aAA3C,0DAAmElB,MACnE,SAAC,KAAD,CAAMqB,GAAG,UAAT,UACE,gBAAKH,UAAU,oBAAf,UACE,gBAAKI,UAAS,UAAKC,EAAAA,EAAL,qBAGlB,SAAC,KAAD,CAAMF,GAAG,gBAAT,UACE,gBAAKG,IAAKC,EAAcC,OAAO,OAAOC,MAAM,OACvCC,IAAI,mBAGb,gBAAKV,UAAU,cAAf,SACG9B,EAAMyC,KAAI,SAACC,EAAIC,GAAL,OAAcA,EAAMvC,GACzB,iBAAK0B,UAAU,oBAAf,WACA,gBAAKC,MAAO,CAACa,OAAQ,WAChBC,QAAS,kBAAMC,EAAAA,EAAAA,IAAU,6CAAD,OAA8CJ,EAAGK,OAAhE,EACMX,IAAKY,EACpBV,OAAO,OACPC,MAAM,OACNC,IAAI,cAHCE,EAAGK,QAIb,iBACMhB,MAAO,CAACC,MAAO,WACfF,UAAU,YAFhB,SAE6BY,EAAGxB,MAFrBwB,EAAGxB,OAGd,iBACMa,MAAO,CAACC,MAAO,WACfF,UAAU,YAFhB,SAE6BY,EAAGO,eAFrBP,EAAGO,gBAGd,iBACMlB,MAAO,CAACC,MAAO,WACfF,UAAU,YAFhB,SAE6BY,EAAGrB,eAFrBqB,EAAGrB,gBAGd,gBACKe,IAAKM,EAAGxB,OAAShB,EAAUyC,EAAM,GAC3BO,EACAC,EACNb,OAAO,OAAOC,MAAM,OAAOC,IAAI,UAJ1BE,EAAGU,SAhB2BV,EAAGW,IAsB3C,EAvBK,UA2BjB,iBAAKtB,MAAO,CAACuB,QAAShD,EAAU,OAAS,QAASwB,UAAU,aAA5D,WACE,iBAAKA,UAAU,gBAAf,WACE,iBAAMA,UAAU,QAAhB,SAAyBf,MACzB,iBAAMe,UAAU,QAAhB,SAAyBlB,QAE3B,iBAAKkB,UAAU,cAAf,WAEE,gBAAKC,MAAO,CAACwB,gBAAgB,OAAD,OAAS5D,EAAOC,GAAQC,MAAxB,KAAkCC,OAAQH,EAAOC,GAAQE,QAASgC,UAAU,YAExG,iBAAKA,UAAU,kBAAf,WACE,iBAAMC,MAAO,CAACC,MAAO,SAAUF,UAAU,aAAzC,SAAuDtB,KACvD,iBAAMsB,UAAU,iBAAhB,SAAkCpB,QAEpC,gBAAKoB,UAAU,iBAAf,SACGtC,EAAOiD,KAAI,SAAAC,GAAE,OAAI,SAAC,IAAD,CACUG,QAAS,iBAvGlC,2CADQW,EAwG8Cd,EAAGjD,OAvG5CiB,IAAyBV,EAAMI,EAAe,GAAGiB,eAC1D,uDAARmC,GAAyB9C,IAAyBV,EAAMI,EAAe,GAAGiB,eACjFlB,EAAa,GAAD,eAAKD,GAAL,CAAgBF,EAAMI,EAAe,GAAGc,QAChDtB,EAAS,GACXkB,EAAUlB,EAAS,GACnBiB,EAAUD,EAAS,KAEnBC,EAAUD,EAAkB,GAAThB,KAGrBO,EAAa,GAAD,eAAKD,GAAL,CAAgBF,EAAMI,EAAe,GAAGiB,iBACpDP,EAAU,IAEZT,EAAgBD,EAAe,QAC/Ba,GAAoBjB,GAfA,IAACwD,CAwG0B,EACT1B,UAAS,qBAAgBY,EAAGhD,OAC5B+D,SAAS,EAHnB,SAIff,EAAGjD,MAJ2BiD,EAAGjD,KAAtB,cAW3B,EC/ID,EAZ6C,SAAC,GAAyB,IAAxBgE,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,SACtD,OACI,iBAAK3B,MAAO,CAACuB,QAASG,EAAU,OAAS,QAAS3B,UAAU,eAA5D,WACE,iBAAMA,UAAU,aAAhB,mDACA,kBAAMA,UAAU,YAAhB,kvBAA6K,kBAA7K,8GAGC4B,IAGR,ECZKlE,EAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GA6B/B,EA3BmB,WACjB,OAAkCP,EAAAA,EAAAA,WAAkB,GAApD,eAAO0E,EAAP,KAAkBC,EAAlB,KACA,GAAoC3E,EAAAA,EAAAA,UAAiB,GAArD,eAAO4E,EAAP,KAAmBC,EAAnB,KAOA,OACI,2BACGH,IACM,SAAC,EAAD,CAAY5D,KAAM8D,EAAa,KAEtC,gBAAK9B,MAAO,CAACuB,QAASK,EAAY,OAAS,QAAS7B,UAAU,6BAE9D,SAAC,EAAD,CAAkB2B,SAAUE,EAAWD,UACrC,gBAAK5B,UAAU,cAAf,SACGtC,EAAOiD,KAAI,SAAAC,GAAE,OAAI,SAAC,IAAD,CACUG,QAAS,kBAf/C,SAA0BH,GACxBoB,EAAcpB,GACdkB,GAAa,EACd,CAYoDG,CAAiBrB,EAAvB,EACTZ,UAAU,YACV2B,SAAS,EAHnB,SAG0Bf,GAHXA,EAAnB,UAOzB,EChBD,EAZkB,WAChB,OACI,4BACE,SAAC,EAAD,KACA,SAAC,KAAD,CAAMT,GAAG,IAAT,UAAa,SAAC,IAAD,CAAUH,UAAW,cAAe2B,SAAS,EAA7C,mBAIpB,C","sources":["hooks/useFetching.ts","pages/games/sprint/game-window.tsx","pages/games/sprint/difficulty-window.tsx","pages/games/sprint/sprint-main.tsx","pages/games/sprint/sprint.tsx"],"sourcesContent":["import {useState} from \"react\";\n\nexport const useFetching = (callback: () => Promise<void>) => {\n  const [error, setError] = useState<string>('');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const fetching = async () => {\n    try {\n      setIsLoading(true);\n      await callback();\n    } catch (e) {\n      setError((e as Error).message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return [fetching, isLoading, error];\n}","import React, {useEffect, useState} from 'react';\nimport MyButton from \"../../../components/UI/button/button\";\nimport {Word} from \"../../../types/types\";\nimport {useFetching} from \"../../../hooks/useFetching\";\nimport PostService from \"../../../api/PostService\";\nimport sprite from \"../../../assets/svg/sprite.svg\";\nimport {Link} from \"react-router-dom\";\nimport {getRandomElement, playAudio} from \"../../../utils/utils\";\nimport glossaryLink from '../../../assets/png/books.png';\nimport streak1 from '../../../assets/png/1.png'\nimport streak2 from '../../../assets/png/2.png'\nimport streak3 from '../../../assets/png/3.png'\nimport streak4 from '../../../assets/png/4.png'\nimport voiceLink from \"../../../assets/png/voice-icon.png\";\nimport correctAnswer from \"../../../assets/png/correctans.png\";\nimport wrongAnswer from \"../../../assets/png/wrongans.png\";\n\nconst btnArr = [{text: '❮ Не верно', class: 'wrong'}, {text: 'Верно ❯', class: 'right'}]\n\nconst STREAK = [\n  {streak: 1, value: streak1, border: 'none'},\n  {streak: 2, value: streak2, border: '1px #ffbd15 solid'},\n  {streak: 3, value: streak3, border: '2px #ff6715 solid'},\n  {streak: 4, value: streak4, border: '3px #ff3e15 solid'},\n]\n\ninterface gameProps {\n  diff: number;\n}\n\nconst GameWindow: React.FC<gameProps> = ({diff}) => {\n  const [words, setWords] = useState<Array<Word>>([]);\n  const [userWords, setUserWords] = useState<Array<string>>([]);\n  const [targetAnswer, setTargetAnswer] = useState<number>(0);\n  const [endGame, setEndGame] = useState<boolean>(false);\n  const [currentWord, setCurrentWord] = useState<string>('');\n  const [currentWordTranslate, setCurrentWordTranslate] = useState<string>('');\n  const [points, setPoints] = useState<number>(0);\n  const [streak, setStreak] = useState<number>(0);\n  const [time, setTime] = useState<number>(60);\n\n  const pushRandomTranslate = (words: Word[]) => {\n    setCurrentWord(words[targetAnswer].word)\n    const random = getRandomElement(2);\n    if (random === 1) {\n      setCurrentWordTranslate(words[targetAnswer].wordTranslate);\n    } else setCurrentWordTranslate(words[getRandomElement(59)].wordTranslate);\n  }\n\n  const answerHandler = (ans: string) => {\n    if ((ans === 'Верно ❯' && currentWordTranslate === words[targetAnswer - 1].wordTranslate)\n        || ((ans === '❮ Не верно') && currentWordTranslate !== words[targetAnswer - 1].wordTranslate)) {\n      setUserWords([...userWords, words[targetAnswer - 1].word])\n      if (streak < 3) {\n        setStreak(streak + 1)\n        setPoints(points + 10)\n      } else {\n        setPoints(points + streak * 10)\n      }\n    } else {\n      setUserWords([...userWords, words[targetAnswer - 1].wordTranslate])\n      setStreak(0);\n    }\n    setTargetAnswer(targetAnswer + 1);\n    pushRandomTranslate(words);\n  }\n\n  const [fetchWords] = useFetching(async () => {\n    const randomPage = getRandomElement(26);\n    const words = await PostService.getWords(diff, randomPage);\n    setWords(words.concat(await PostService.getWords(randomPage + 1, diff)).concat(await PostService.getWords(randomPage + 2, diff)));\n  });\n\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (time > 0) {\n        setTime(time - 1);\n      } else setEndGame(true)\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, [time])\n\n  useEffect(() => {\n    setTimeout(() => pushRandomTranslate(words), 1)\n    setTargetAnswer(targetAnswer + 1)\n  }, [words])\n\n  useEffect(() => {\n    (fetchWords as (() => Promise<void>))();\n  }, [])\n\n  return (\n      <div className='main-window sprint'>\n        {endGame\n            &&\n          <div className='result-window'>\n            <span style={{color: '#F1F7F5'}} className='game-title'>Ваши результаты:</span>\n            <div className='all-games'>\n              <span style={{color: '#F1F7F5'}} className='game-title'>Ваш счёт: {points}</span>\n              <Link to='/rslang'>\n                <svg className='header__link-icon'>\n                  <use xlinkHref={`${sprite}#home-icon`}/>\n                </svg>\n              </Link>\n              <Link to='/glossary/1/1'>\n                <img src={glossaryLink} height='70px' width='70px'\n                     alt='glossary'/>\n              </Link>\n            </div>\n            <div className='result-list'>\n              {words.map((el, idx) => (idx < targetAnswer)\n                  ? <div className='result-list__item' key={el.id}>\n                    <img style={{cursor: 'pointer'}}\n                         onClick={() => playAudio(`https://react-words-example.herokuapp.com/${el.audio}`)}\n                         key={el.audio} src={voiceLink}\n                         height='30px'\n                         width='30px'\n                         alt='voice-icon'/>\n                    <span key={el.word}\n                          style={{color: '#FBF7F5'}}\n                          className='game-text'>{el.word}</span>\n                    <span key={el.transcription}\n                          style={{color: '#FBF7F5'}}\n                          className='game-text'>{el.transcription}</span>\n                    <span key={el.wordTranslate}\n                          style={{color: '#FBF7F5'}}\n                          className='game-text'>{el.wordTranslate}</span>\n                    <img key={el.image}\n                         src={el.word === userWords[idx - 1]\n                             ? correctAnswer\n                             : wrongAnswer}\n                         height='30px' width='30px' alt='answer'/>\n                  </div>\n                  : '')\n              }\n            </div>\n          </div>}\n        <div style={{display: endGame ? 'none' : 'flex'}} className='game-field'>\n          <div className='score-wrapper'>\n            <span className='timer'>{time}</span>\n            <span className='score'>{points}</span>\n          </div>\n          <div className='game-window'>\n\n            <div style={{backgroundImage: `url(${STREAK[streak].value})`, border: STREAK[streak].border}} className='streak'>\n            </div>\n            <div className='words-container'>\n              <span style={{color: 'white'}} className='game-title'>{currentWord}</span>\n              <span className='game-translate'>{currentWordTranslate}</span>\n            </div>\n            <div className='button-wrapper'>\n              {btnArr.map(el => <MyButton key={el.text}\n                                          onClick={() => answerHandler(el.text)}\n                                          className={`sprint-btn ${el.class}`}\n                                          visible={true}>\n                {el.text}\n              </MyButton>)}\n            </div>\n          </div>\n        </div>\n      </div>\n  );\n};\n\nexport default GameWindow;\n","import React from 'react';\n\ninterface winProps {\n  children: React.ReactNode;\n  onClick?: () => void;\n  visible?: boolean;\n}\n\nconst DifficultyWindow: React.FC<winProps> = ({visible, children}) => {\n  return (\n      <div style={{display: visible ? 'flex' : 'none'}} className='start-window'>\n        <span className='game-title'>Спринт</span>\n        <span className='game-text'>Во время игры в Спринт вам нужно определить, соответствует ли слову указанный перевод. Сделайте как можно больше правильных ответов за 60 секунд.<br/>\n                Выберите сложность:\n            </span>\n        {children}\n      </div>\n  );\n};\n\nexport default DifficultyWindow;\n","import React, {useEffect, useState} from 'react';\nimport MyButton from \"../../../components/UI/button/button\";\nimport GameWindow from \"./game-window\";\nimport DifficultyWindow from \"./difficulty-window\";\nimport './sprint.css'\n\nconst btnArr = [1, 2, 3, 4, 5, 6];\n\nconst SprintMain = () => {\n  const [startGame, setStartGame] = useState<boolean>(false);\n  const [difficulty, setDifficulty] = useState<number>(0);\n\n  function difficultyHandle(el: number) {\n    setDifficulty(el);\n    setStartGame(true)\n  }\n\n  return (\n      <div>\n        {startGame\n            && <GameWindow diff={difficulty - 1}/>\n        }\n        <div style={{display: startGame ? 'none' : 'flex'}} className='main-window blur sprint'>\n        </div>\n        <DifficultyWindow visible={!startGame} children={\n          <div className='btn-wrapper'>\n            {btnArr.map(el => <MyButton key={el}\n                                        onClick={() => difficultyHandle(el)}\n                                        className='btn audio'\n                                        visible={true}>{el}</MyButton>)}\n          </div>}/>\n      </div>\n  );\n};\n\nexport default SprintMain;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MyButton from '../../../components/UI/button/button';\nimport SprintMain from \"./sprint-main\";\n\nconst AudioCall = () => {\n  return (\n      <div>\n        <SprintMain/>\n        <Link to='/'><MyButton className={'game-button'} visible={true}>X</MyButton>\n        </Link>\n      </div>\n  );\n};\n\n\n\nexport default AudioCall;\n"],"names":["useFetching","callback","useState","error","setError","isLoading","setIsLoading","fetching","message","btnArr","text","class","STREAK","streak","value","border","diff","words","setWords","userWords","setUserWords","targetAnswer","setTargetAnswer","endGame","setEndGame","currentWord","setCurrentWord","currentWordTranslate","setCurrentWordTranslate","points","setPoints","setStreak","time","setTime","pushRandomTranslate","word","random","getRandomElement","wordTranslate","randomPage","PostService","concat","fetchWords","useEffect","timer","setTimeout","clearTimeout","className","style","color","to","xlinkHref","sprite","src","glossaryLink","height","width","alt","map","el","idx","cursor","onClick","playAudio","audio","voiceLink","transcription","correctAnswer","wrongAnswer","image","id","display","backgroundImage","ans","visible","children","startGame","setStartGame","difficulty","setDifficulty","difficultyHandle"],"sourceRoot":""}
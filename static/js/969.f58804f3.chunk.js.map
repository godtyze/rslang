{"version":3,"file":"static/js/969.f58804f3.chunk.js","mappings":"yKAgBA,EARsC,SAAC,GAA2B,IAA1BA,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,UAChD,OACE,mBAAQA,UAAWA,EAAnB,SACGD,GAGN,E,2DCeD,EAvB6B,WAC3B,OACI,iBAAKC,UAAU,kBAAf,WACE,SAAC,IAAD,CACIA,UAAU,GACVC,KAAK,cACLC,IAAKC,EACLC,MAAM,OACNC,OAAO,OACPC,KAAK,kEAET,SAAC,IAAD,CACIN,UAAU,GACVC,KAAK,UACLC,IAAKK,EACLH,MAAM,QACNC,OAAO,OACPC,KAAK,2CAIhB,E,2DCdKE,EAAM,IAAIC,EAAAA,EA+EhB,EA7E0C,SAAC,GAU6B,IAV5BC,EAU2B,EAV3BA,KACCC,EAS0B,EAT1BA,MACAC,EAQ0B,EAR1BA,MACAC,EAO0B,EAP1BA,aACAC,EAM0B,EAN1BA,aACAC,EAK0B,EAL1BA,cACAC,EAI0B,EAJ1BA,qBACAC,EAG0B,EAH1BA,YACAC,EAE0B,EAF1BA,YACAC,EAC0B,EAD1BA,cACAC,EAA0B,EAA1BA,qBAC3C,GAAgDC,EAAAA,EAAAA,UAAuB,CAAEC,MAAO,GAAIC,SAAS,IAA7F,eAAOC,EAAP,KAAyBC,EAAzB,KACAjB,EAAIkB,cAAJ,UAAqBC,EAAAA,IAArB,OAA8BhB,IAASiB,MAAK,SAAAN,GAC1CG,EAAoB,CAClBH,MAAOA,EAAMO,IACbN,QAASD,EAAMC,SAElB,IAGD,IAAMO,EAAc,IAAIC,MAClBC,EAAQ,yCAAG,WAAOC,EAAaC,GAApB,uFACfJ,EAAYK,IAAZ,UAAqBR,EAAAA,IAArB,OAA8BM,GAC9BH,EAAYM,OAFG,SAGTN,EAAYO,OAHH,UAQD,IAAVH,IACFI,EAAY,EACZC,EAAYzB,GAGA,IAAVoB,IACFI,EAAY,EACZC,EAAY1B,GAGA,IAAVqB,EAlBW,iDAsBTM,EAAW,SAAXA,IACJV,EAAYW,oBAAoB,QAASD,GACzCR,EAASO,EAAWD,EACrB,EAEDR,EAAYY,iBAAiB,QAASF,GA3BvB,4CAAH,wDA8Bd,OACE,iBAAKxC,UAAU,kBAAkB2C,MAAO,CAACC,WAAW,GAAD,OAAKpB,EAAiBF,QAAzE,WACE,gBAAKtB,UAAU,aAAa2C,MAAO,CAACC,WAAW,OAAD,OAASjB,EAAAA,IAAT,OAAkBhB,EAAlB,MAA9C,UACE,iBAAKX,UAAU,qBAAqB2C,MAAO,CAACC,WAAW,gCAAD,OAAkCpB,EAAiBF,MAAnD,MAAtD,WACE,eAAItB,UAAU,eAAd,SAA8BU,KAC9B,iBAAKV,UAAU,uBAAf,WACE,0BAAOe,KACP,0BAAOI,KACP,SAAC,MAAD,CAAa0B,QAAS,kBAAMb,EAASpB,EAAO,EAAtB,EAA0B+B,MAAO,CAACG,OAAQ,sBAItE,iBAAK9C,UAAU,oBAAf,WACE,iBAAKA,UAAU,6BAAf,WACE,iBAAM+C,wBAAyB,CAACC,OAAQ/B,MACxC,iBAAM8B,wBAAyB,CAACC,OAAQ9B,SAE1C,iBAAKlB,UAAU,8BAAf,WACE,0BAAOgB,KACP,0BAAOI,YAKhB,EC5DD,EArB0C,SAAC,GAAa,IAAZ6B,EAAW,EAAXA,MAC1C,OACE,gBAAKjD,UAAU,cAAf,SACGiD,EAAMC,KAAI,SAAAxC,GAAI,OACf,SAAC,EAAD,CAEEA,KAAMA,EAAKA,KACXC,MAAOD,EAAKC,MACZC,MAAOF,EAAKE,MACZE,aAAcJ,EAAKI,aACnBD,aAAcH,EAAKG,aACnBI,YAAaP,EAAKO,YAClBC,YAAaR,EAAKQ,YAClBC,cAAeT,EAAKS,cACpBJ,cAAeL,EAAKK,cACpBC,qBAAsBN,EAAKM,qBAC3BI,qBAAsBV,EAAKU,sBAXtBV,EAAKA,KAFG,KAgBpB,E,oBCoED,EAjF8C,SAAC,GAIa,IAJZyC,EAIW,EAJXA,aACCC,EAGU,EAHVA,YACAC,EAEU,EAFVA,YACAC,EACU,EADVA,YACAC,EAAU,EAAVA,KACvCC,GAAUC,EAAAA,EAAAA,MAAVD,MACFE,GAAWC,EAAAA,EAAAA,MAEjB,GAAgCtC,EAAAA,EAAAA,WAAkB,GAAlD,eAAOuC,EAAP,KAAiBC,EAAjB,KACA,GAA0BxC,EAAAA,EAAAA,UAAQ,UAAYkC,IAA9C,eAAOO,EAAP,KAAcC,EAAd,KAEIC,EAAoBT,EA8BxB,OACE,iBAAKvD,UAAU,aAAf,WACE,SAAC,IAAD,CACEA,UAAoB,IAATuD,EAAa,2BAA6B,cACrDU,SAAS,EACTpB,QAASM,EAHX,iBAIA,SAAC,IAAD,CACEnD,UAAoB,IAATuD,EAAa,2BAA6B,cACrDU,SAAS,EACTpB,QAASS,EAHX,gBAIEM,IACE,kBACIM,QAAQ,OACRrB,QAAS,kBAAMgB,GAAY,EAAlB,EACT7D,UAAU,mBAHd,SAIG8D,IAENF,IAAY,SAAC,IAAD,CACXO,KAAK,OACLC,GAAG,OACHpE,UAAU,mBACV8D,MAAOA,EACPO,SAlDW,SAACC,IACXA,EAAEC,OAAOT,OAAS,IAAyB,MAAnBQ,EAAEC,OAAOT,OAAeC,EAASO,EAAEC,OAAOT,MACxE,EAiDKU,OA/CS,WACbX,GAAY,GAEPC,GAKAA,IAAUE,GAAmBN,EAAS,aAAD,OAAcF,EAAd,YAAuBM,IAJ/DC,EAAS,GAAD,OAAIC,GAKf,EAuCKS,WAAW,EACXC,UAtCU,SAACJ,GACf,GAAe,UAAXA,EAAEK,MAAoBf,EAAU,CAGlC,GAFAC,GAAY,IAEPC,EAEH,YADAC,EAAS,GAAD,OAAIC,KAITF,IAAUE,GAAmBN,EAAS,aAAD,OAAcF,EAAd,YAAuBM,GAClE,CACF,EA4BKc,aAAa,SAEf,SAAC,IAAD,CACE5E,UAAoB,KAATuD,EAAc,2BAA6B,cACtDU,SAAS,EACTpB,QAASQ,EAHX,gBAIA,SAAC,IAAD,CACErD,UAAoB,KAATuD,EAAc,2BAA6B,cACtDU,SAAS,EACTpB,QAASO,EAHX,kBAML,E,oBCxDD,EA7BwC,SAAC,GAA+B,IAA9ByB,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,cAClD,GAAgCzD,EAAAA,EAAAA,WAAS,GAAzC,eAAO0D,EAAP,KAAiBC,EAAjB,KAEA,OACE,iBAAKhF,UAAU,WAAf,WACE,iBAAKA,UAAU,eAAe6C,QAAS,kBAAMmC,GAAaD,EAAnB,EAAvC,UACGD,EADH,kEAEE,SAAC,MAAD,OAEDC,IACC,gBAAK/E,UAAU,mBAAf,SARU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GASfkD,KAAI,SAAC+B,GAAD,OACX,iBAEEpC,QAAS,WACPgC,EAASI,GACTD,GAAY,EACb,EACDhF,UAAU,gBANZ,UAQGiF,EARH,mEACOA,EAFI,QAgBtB,E,8BCkDD,EAtE2B,WACzB,OAAsDC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,eAAV,IAAnEnC,EAAP,EAAOA,MAAOoC,EAAd,EAAcA,UAAWC,EAAzB,EAAyBA,aAAcC,EAAvC,EAAuCA,YACvC,GAAuCC,EAAAA,EAAAA,KAAhCC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,SAAUC,EAA1B,EAA0BA,UAC1B,GAAsBlC,EAAAA,EAAAA,MAAfD,EAAP,EAAOA,MAAOD,EAAd,EAAcA,KACRG,GAAWC,EAAAA,EAAAA,MAoBjB,OAlBAiC,EAAAA,EAAAA,YAAU,WACJC,MAAMC,OAAOtC,KAAWqC,MAAMC,OAAOvC,KAKrCC,GAASD,KAAUC,EAAQ,IAAMD,EAAO,IAAMA,EAAO,IAJvDG,EAAS,iBASPF,GAASD,IACXmC,GAAUlC,GACViC,GAASlC,GACToC,GAAWnC,EAAQ,GAAID,EAAO,GAEjC,GAAE,CAACC,EAAOD,KAGT,iBAAKvD,UAAU,eAAf,WACE,UAAC,EAAD,CAAQA,UAAU,kBAAlB,WACE,SAAC,KAAD,CAAM+F,GAAG,IAAT,UACE,gBAAK/F,UAAU,oBAAf,UACE,gBAAKgG,UAAS,UAAKC,EAAAA,EAAL,qBAGlB,SAAC,EAAD,QAEF,gBAAKtD,MAAO,CAACuD,KAAM,WAAYC,QAAS,OAAQC,QAAS,OAAQC,eAAgB,UAAjF,SACGhB,GACG,SAAC,IAAD,IACA9B,GAAQC,IAAS,iBAAKxD,UAAU,aAAf,WACnB,SAAC,EAAD,CAAU6E,SAAU,SAACrB,GACnBkC,EAASlC,GACTE,EAAS,aAAD,OAAcF,EAAd,MACT,EAAEsB,eAAgBtB,KACnB,SAAC,EAAD,CAAUP,MAAOA,KACjB,SAAC,EAAD,CACEM,KAAMgC,EACNlC,YAAa,WACXoC,EAAQF,EAAc,GACtB7B,EAAS,aAAD,OAAc4B,EAAd,YAA8BC,EAAc,GACrD,EACDjC,YAAa,WACXmC,EAAQF,EAAc,GACtB7B,EAAS,aAAD,OAAc4B,EAAd,YAA8BC,EAAc,GACrD,EACDpC,aAAc,WACZsC,EAAQ,GACR/B,EAAS,aAAD,OAAc4B,EAAd,MACT,EACDlC,YAAa,WACXqC,EAAQ,IACR/B,EAAS,aAAD,OAAc4B,EAAd,OACT,UAKP,SAAC,IAAD,MAGL,C","sources":["components/header/header.tsx","pages/glossary/navigation.tsx","components/word-card/word-card.tsx","pages/glossary/word-list.tsx","components/UI/pagination/pagination.tsx","components/UI/mySelect/mySelect.tsx","pages/glossary/glossary.tsx"],"sourcesContent":["import React from 'react';\nimport './header.css';\n\ntype headerProps = {\n  children?: React.ReactNode;\n  className: string;\n}\n\nconst Header: React.FC<headerProps> = ({children, className}) => {\n  return (\n    <header className={className}>\n      {children}\n    </header>\n  );\n};\n\nexport default Header;","import React from 'react';\nimport GameLink from \"../main/game-link\";\nimport audioCallImg from \"../../assets/png/speaker.png\";\nimport sprintImg from \"../../assets/png/sprint.png\";\n\n\nconst Navigation: React.FC = () => {\n  return (\n      <nav className='header__nav nav'>\n        <GameLink\n            className=''\n            path='/audio-call'\n            img={audioCallImg}\n            width='50px'\n            height='50px'\n            name='Аудиовызов'\n        />\n        <GameLink\n            className=''\n            path='/sprint'\n            img={sprintImg}\n            width='100px'\n            height='60px'\n            name='Спринт'\n        />\n      </nav>\n  );\n};\n\nexport default Navigation;\n","import React, {useState} from 'react';\nimport './word-card.css';\nimport {Word} from \"../../types/types\";\nimport {server} from \"../../consts/consts\";\nimport { FastAverageColor } from 'fast-average-color';\nimport { AiFillSound } from 'react-icons/ai';\n\ntype wordCardProps = Omit<Word, 'id' | 'page' | 'group'>;\ntype averageColor = {\n  color: string;\n  isLight: boolean;\n}\n\nconst fac = new FastAverageColor();\n\nconst WordCard: React.FC<wordCardProps> = ({word,\n                                             image,\n                                             audio,\n                                             audioExample,\n                                             audioMeaning,\n                                             wordTranslate,\n                                             textMeaningTranslate,\n                                             textMeaning,\n                                             textExample,\n                                             transcription,\n                                             textExampleTranslate}) => {\n  const [averageColorData, setAverageColorData] = useState<averageColor>({ color: '', isLight: false });\n  fac.getColorAsync(`${server}${image}`).then(color => {\n    setAverageColorData({\n      color: color.rgb,\n      isLight: color.isLight,\n    });\n  });\n\n\n  const audioPlayer = new Audio();\n  const playWord = async (url: string, phase?: number) => {\n    audioPlayer.src = `${server}${url}`;\n    audioPlayer.load();\n    await audioPlayer.play();\n\n    let nextPhase: number;\n    let nextAudio: string;\n\n    if (phase === 1) {\n      nextPhase = 2;\n      nextAudio = audioMeaning;\n    }\n\n    if (phase === 2) {\n      nextPhase = 3;\n      nextAudio = audioExample;\n    }\n\n    if (phase === 3) {\n      return;\n    }\n\n    const playNext = () => {\n      audioPlayer.removeEventListener('ended', playNext);\n      playWord(nextAudio, nextPhase);\n    };\n\n    audioPlayer.addEventListener('ended', playNext);\n  };\n\n  return (\n    <div className='word__card card' style={{background: `${averageColorData.color}`}}>\n      <div className='card__main' style={{background: `url(${server}${image})`}}>\n        <div className='card__main-wrapper' style={{background: `linear-gradient(transparent, ${averageColorData.color})`}}>\n          <h3 className='card__header'>{word}</h3>\n          <div className='card__header-details'>\n            <span>{wordTranslate}</span>\n            <span>{transcription}</span>\n            <AiFillSound onClick={() => playWord(audio, 1)} style={{cursor: 'pointer'}}/>\n          </div>\n        </div>\n      </div>\n      <div className='card__description'>\n        <div className='card__description-examples'>\n          <span dangerouslySetInnerHTML={{__html: textMeaning}}></span>\n          <span dangerouslySetInnerHTML={{__html: textExample}}></span>\n        </div>\n        <div className='card__description-translate'>\n          <span>{textMeaningTranslate}</span>\n          <span>{textExampleTranslate}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WordCard;","import React from 'react';\nimport {Word} from \"../../types/types\";\nimport WordCard from \"../../components/word-card/word-card\";\nimport './word-list.css';\n\ntype wordListProps = {\n  words: Array<Word>;\n}\n\nconst WordList: React.FC<wordListProps> = ({words}) => {\n  return (\n    <div className='word__cards'>\n      {words.map(word =>\n      <WordCard\n        key={word.word}\n        word={word.word}\n        image={word.image}\n        audio={word.audio}\n        audioMeaning={word.audioMeaning}\n        audioExample={word.audioExample}\n        textMeaning={word.textMeaning}\n        textExample={word.textExample}\n        transcription={word.transcription}\n        wordTranslate={word.wordTranslate}\n        textMeaningTranslate={word.textMeaningTranslate}\n        textExampleTranslate={word.textExampleTranslate}/>)}\n    </div>\n  );\n};\n\nexport default WordList;","import React, {useState} from 'react';\nimport './pagination.css';\nimport MyButton from \"../button/button\";\nimport {useNavigate, useParams} from \"react-router-dom\";\nimport {glossaryParams} from \"../../../types/types\";\nimport MyInput from \"../input/input\";\n\ntype paginationProps = {\n  onClickNext: () => void;\n  onClickPrev: () => void;\n  onClickFirst: () => void;\n  onClickLast: () => void;\n  page: number;\n}\n\nconst Pagination: React.FC<paginationProps> = ({onClickFirst,\n                                                 onClickLast,\n                                                 onClickNext,\n                                                 onClickPrev,\n                                                 page}) => {\n  const { group } = useParams<glossaryParams>();\n  const navigate = useNavigate();\n\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [value, setValue] = useState<string>(`${page}`)\n\n  let previousPageValue = page;\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (+e.target.value <= 30 && e.target.value !== '0') setValue(e.target.value);\n  }\n\n  const onBlur = () => {\n    setEditMode(false);\n\n    if (!value) {\n      setValue(`${previousPageValue}`);\n      return;\n    }\n\n    if (+value !== previousPageValue) navigate(`/glossary/${group}/${value}`);\n  }\n\n  const onEnter = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.code === 'Enter' && editMode) {\n      setEditMode(false);\n\n      if (!value) {\n        setValue(`${previousPageValue}`);\n        return;\n      }\n\n      if (+value !== previousPageValue) navigate(`/glossary/${group}/${value}`);\n    }\n  }\n\n  return (\n    <div className='pagination'>\n      <MyButton\n        className={page === 1 ? 'arr-wrapper disabled-btn' : 'arr-wrapper'}\n        visible={true}\n        onClick={onClickFirst}>&lt;&lt;</MyButton>\n      <MyButton\n        className={page === 1 ? 'arr-wrapper disabled-btn' : 'arr-wrapper'}\n        visible={true}\n        onClick={onClickPrev}>&lt;</MyButton>\n      {!editMode &&\n          <label\n              htmlFor='page'\n              onClick={() => setEditMode(true)}\n              className='arr-wrapper page'>\n            {value}\n          </label>}\n      {editMode && <MyInput\n        type='text'\n        id='page'\n        className='arr-wrapper page'\n        value={value}\n        onChange={onChange}\n        onBlur={onBlur}\n        autoFocus={true}\n        onKeyDown={onEnter}\n        autoComplete='off'\n        ></MyInput>}\n      <MyButton\n        className={page === 30 ? 'arr-wrapper disabled-btn' : 'arr-wrapper'}\n        visible={true}\n        onClick={onClickNext}>&gt;</MyButton>\n      <MyButton\n        className={page === 30 ? 'arr-wrapper disabled-btn' : 'arr-wrapper'}\n        visible={true}\n        onClick={onClickLast}>&gt;&gt;</MyButton>\n    </div>\n  );\n};\n\nexport default Pagination;","import React, {useState} from 'react';\nimport './mySelect.css';\nimport { FaCaretDown } from 'react-icons/fa';\n\ntype selectProps = {\n  onSelect: (group: number) => void;\n  selectedGroup: number;\n}\n\nconst MySelect: React.FC<selectProps> = ({onSelect, selectedGroup}) => {\n  const [isActive, setIsActive] = useState(false);\n  const options = [1, 2, 3, 4, 5, 6];\n  return (\n    <div className=\"dropdown\">\n      <div className=\"dropdown-btn\" onClick={() => setIsActive(!isActive)}>\n        {selectedGroup} группа слов\n        <FaCaretDown/>\n      </div>\n      {isActive && (\n        <div className=\"dropdown-content\">\n          {options.map((option) => (\n            <div\n              key={option}\n              onClick={() => {\n                onSelect(option);\n                setIsActive(false);\n              }}\n              className=\"dropdown-item\"\n            >\n              {option} группа слов\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MySelect;","import React, {useEffect} from 'react';\nimport './glossary.css';\nimport Header from \"../../components/header/header\";\nimport {Link, useNavigate, useParams} from \"react-router-dom\";\nimport sprite from '../../assets/svg/sprite.svg';\nimport Navigation from \"./navigation\";\nimport WordList from \"./word-list\";\nimport {glossaryParams} from \"../../types/types\";\nimport Pagination from \"../../components/UI/pagination/pagination\";\nimport Footer from \"../../components/footer/footer\";\nimport MySelect from \"../../components/UI/mySelect/mySelect\";\nimport Loader from \"../../components/Loader/loader\";\nimport {useAppSelector} from \"../../hooks/redux\";\nimport {useActions} from \"../../hooks/useActions\";\n\n\nconst Glossary: React.FC = () => {\n  const {words, isLoading, currentGroup, currentPage} = useAppSelector(state => state.glossaryReducer);\n  const {setPage, setGroup, loadWords} = useActions();\n  const {group, page} = useParams<glossaryParams>();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (isNaN(Number(group)) || isNaN(Number(page))) {\n      navigate('/glossary/1/1');\n      return;\n    }\n\n    if (group && page && (+group > 6 || +page < 1 || +page > 30)) {\n      navigate('/glossary/1/1');\n      return;\n    }\n\n    if (group && page) {\n      setGroup(+group);\n      setPage(+page);\n      loadWords(+group - 1, +page - 1);\n    }\n  }, [group, page]);\n\n  return (\n    <div className='App glossary'>\n      <Header className='header glossary'>\n        <Link to='/'>\n          <svg className='header__link-icon'>\n            <use xlinkHref={`${sprite}#home-icon`}/>\n          </svg>\n        </Link>\n        <Navigation/>\n      </Header>\n      <div style={{flex: '1 0 auto', padding: '10px', display: 'flex', justifyContent: 'center'}}>\n        {isLoading\n          ? <Loader/>\n          : page && group && <div className='word__list'>\n          <MySelect onSelect={(group: number) => {\n            setGroup(group);\n            navigate(`/glossary/${group}/1`);\n          }} selectedGroup={+group}/>\n          <WordList words={words}/>\n          <Pagination\n            page={currentPage}\n            onClickNext={() => {\n              setPage(currentPage + 1);\n              navigate(`/glossary/${currentGroup}/${currentPage + 1}`);\n            }}\n            onClickPrev={() => {\n              setPage(currentPage - 1);\n              navigate(`/glossary/${currentGroup}/${currentPage - 1}`);\n            }}\n            onClickFirst={() => {\n              setPage(1);\n              navigate(`/glossary/${currentGroup}/1`);\n            }}\n            onClickLast={() => {\n              setPage(30);\n              navigate(`/glossary/${currentGroup}/30`);\n            }}\n          />\n        </div>\n        }\n      </div>\n      <Footer/>\n    </div>\n  );\n};\n\nexport default Glossary;\n"],"names":["children","className","path","img","audioCallImg","width","height","name","sprintImg","fac","FastAverageColor","word","image","audio","audioExample","audioMeaning","wordTranslate","textMeaningTranslate","textMeaning","textExample","transcription","textExampleTranslate","useState","color","isLight","averageColorData","setAverageColorData","getColorAsync","server","then","rgb","audioPlayer","Audio","playWord","url","phase","src","load","play","nextPhase","nextAudio","playNext","removeEventListener","addEventListener","style","background","onClick","cursor","dangerouslySetInnerHTML","__html","words","map","onClickFirst","onClickLast","onClickNext","onClickPrev","page","group","useParams","navigate","useNavigate","editMode","setEditMode","value","setValue","previousPageValue","visible","htmlFor","type","id","onChange","e","target","onBlur","autoFocus","onKeyDown","code","autoComplete","onSelect","selectedGroup","isActive","setIsActive","option","useAppSelector","state","glossaryReducer","isLoading","currentGroup","currentPage","useActions","setPage","setGroup","loadWords","useEffect","isNaN","Number","to","xlinkHref","sprite","flex","padding","display","justifyContent"],"sourceRoot":""}
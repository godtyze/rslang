{"version":3,"file":"static/js/336.6f66ea0d.chunk.js","mappings":"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","sources":["hooks/useFetching.ts","pages/games/audio-call/game-window.tsx","pages/games/audio-call/difficulty-window.tsx","pages/games/audio-call/audio-main.tsx","pages/games/audio-call/audio-call.tsx"],"sourcesContent":["import {useState} from \"react\";\n\nexport const useFetching = (callback: () => Promise<void>) => {\n  const [error, setError] = useState<string>('');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const fetching = async () => {\n    try {\n      setIsLoading(true);\n      await callback();\n    } catch (e) {\n      setError((e as Error).message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return [fetching, isLoading, error];\n}","import React, {useEffect, useState} from 'react';\nimport MyButton from \"../../../components/UI/button/button\";\nimport {Word} from \"../../../types/types\";\nimport {useFetching} from \"../../../hooks/useFetching\";\nimport PostService from \"../../../api/PostService\";\nimport sprite from \"../../../assets/svg/sprite.svg\";\nimport {Link} from \"react-router-dom\";\nimport {getRandomElement, playAudio, shuffle} from \"../../../utils/utils\";\nimport glossaryLink from '../../../assets/png/books.png';\nimport voiceLink from '../../../assets/png/voice-icon.png';\nimport correctAnswer from '../../../assets/png/correctans.png';\nimport wrongAnswer from '../../../assets/png/wrongans.png';\nimport {server} from '../../../consts/consts'\n\ninterface gameProps {\n  diff: number;\n}\n\nconst GameWindow: React.FC<gameProps> = ({diff}) => {\n  const [words, setWords] = useState<Array<Word>>([]);\n  const [uniqueWords, setUniqueWords] = useState<Array<Word>>([]);\n  const [randomWords, setRandomWords] = useState<string[]>([]);\n  const [answers, setAnswers] = useState<string[]>([]);\n  const [targetAnswer, setTargetAnswer] = useState<string[]>([]);\n  const [barTitle, setBarTitle] = useState<string>('Подготовка:');\n  const [animationTime, setAnimationTime] = useState<number>(2);\n  const [animation, setAnimation] = useState<number>(0);\n  const [endGame, setEndGame] = useState<boolean>(false);\n  const [score, setScore] = useState<number>(0);\n\n  const createRandomWords = (words: Word[]): string[] => {\n    setAnimation(animation + 1);\n    const randomWords: string[] = [];\n    const randomAudios: string[] = [];\n    const array = [...uniqueWords];\n    let random = getRandomElement(array.length - 1);\n    let randomWord = array[random];\n    array.splice(random, 1);\n    randomWords.push(randomWord.wordTranslate);\n    randomAudios.push(randomWord.audio);\n    playAudio(`${server}${randomAudios[randomAudios.length - 1]}`);\n    setTargetAnswer([...targetAnswer, randomWord.wordTranslate]);\n    while (randomWords.length < 4) {\n      let random = getRandomElement(19);\n      const randomWord = words[random];\n      if (randomWords.indexOf(randomWord.wordTranslate) === -1) {\n        randomWords.push(randomWord.wordTranslate);\n      }\n    }\n    shuffle(randomWords);\n    setUniqueWords(array);\n    return randomWords;\n  }\n\n  const answerHandler = (answer: string) => {\n    setAnswers([...answers, answer]);\n    if (targetAnswer.length < 20) {\n      setTargetAnswer([...targetAnswer, answer])\n\n      setAnimation(animation + 1);\n      setRandomWords(createRandomWords(words));\n    } else {\n      setEndGame(true);\n    }\n  }\n\n  const [fetchWords] = useFetching(async () => {\n    const words = await PostService.getWords(diff, getRandomElement(29));\n    setUniqueWords(words);\n    setWords(words);\n    setRandomWords(createRandomWords(words));\n  });\n\n  const handleTimerEnd = () => {\n    if (targetAnswer.length < 20) {\n      if (targetAnswer.length !== 0) {\n        setAnswers([...answers, 'no choice'])\n\n      }\n      setRandomWords(createRandomWords(words));\n    } else setEndGame(true);\n  }\n\n  useEffect(() => {\n    let ans = 0;\n    words.forEach(el => answers.indexOf(el.wordTranslate) === targetAnswer.indexOf(el.wordTranslate) ? ans++ : '')\n    setScore(ans)\n  }, [answers])\n\n  useEffect(() => {\n    (fetchWords as (() => Promise<void>))();\n  }, [])\n\n  useEffect(() => {\n    if (targetAnswer.length > 0) {\n      setBarTitle('Оставшееся время:')\n      setAnimationTime(6)\n    }\n  }, [targetAnswer])\n\n  return (\n      <div className='main-window'>\n        {endGame\n            &&\n          <div className='result-window'>\n            <span style={{color: '#FBF7F5'}} className='game-title'>Ваши результаты:</span>\n            <div className='all-games'>\n              <span style={{color: '#FBF7F5'}}\n                    className='game-title'>{`${score} / ${targetAnswer.length}`}</span>\n              <Link to='/rslang'>\n                <svg className='header__link-icon'>\n                  <use xlinkHref={`${sprite}#home-icon`}/>\n                </svg>\n              </Link>\n              <Link to='/glossary/1/1'>\n                <img src={glossaryLink} height='70px' width='70px'\n                     alt='glossary'/>\n              </Link>\n            </div>\n            <div className='result-list'>\n              {words.map(el => (targetAnswer.indexOf(el.wordTranslate) !== -1 || answers.indexOf(`${el.wordTranslate}-`) !== -1)\n                  ? <div className='result-list__item' key={el.id}>\n                    <img style={{cursor: 'pointer'}}\n                         onClick={() => playAudio(`${server}${el.audio}`)}\n                         key={el.audio} src={voiceLink}\n                         height='30px'\n                         width='30px'\n                         alt='voice-icon'/>\n                    <span key={el.word}\n                          style={{color: '#FBF7F5'}}\n                          className='game-text'>{el.word}</span>\n                    <span key={el.transcription}\n                          style={{color: '#FBF7F5'}}\n                          className='game-text'>{el.transcription}</span>\n                    <span key={el.wordTranslate}\n                          style={{color: '#FBF7F5'}}\n                          className='game-text'>{el.wordTranslate}</span>\n                    <img key={el.image}\n                         src={answers.indexOf(el.wordTranslate) === targetAnswer.indexOf(el.wordTranslate)\n                             ? correctAnswer\n                             : wrongAnswer}\n                         height='30px' width='30px' alt='answer'/>\n                  </div>\n                  : '')\n              }\n            </div>\n          </div>}\n        <div key={animation} className=\"timescale-wrapper\">\n          <h3 className='timescale-title'>{barTitle}</h3>\n          <div className='time-wrapper'>\n            <div style={{animation: `loading ${animationTime}s ease-in-out forwards`}}\n                 onAnimationEnd={() => handleTimerEnd()}\n                 className=\"timescale\">\n              <div className=\"time\"/>\n            </div>\n          </div>\n        </div>\n        <div style={{display: endGame ? 'none' : 'flex'}} className='answer-wrapper'>\n          {randomWords.map((el) => <MyButton\n              key={el}\n              onClick={() => answerHandler(el)}\n              className='audio-game-btn'\n              visible={true}>{el}</MyButton>)}\n        </div>\n      </div>\n  );\n};\n\nexport default GameWindow;\n","import React from 'react';\n\ninterface winProps {\n  children: React.ReactNode;\n  onClick?: () => void;\n  visible?: boolean;\n}\n\nconst DifficultyWindow: React.FC<winProps> = ({visible, children}) => {\n  return (\n      <div style={{display: visible ? 'flex' : 'none'}} className='start-window'>\n        <span className='game-title'>Аудиовызов</span>\n        <span className='game-text'>Во время игры в Аудиовызов вы долны будете выбрать правильный перевод услышанного вами слова.<br/>\n                Выберите сложность:\n            </span>\n        {children}\n      </div>\n  );\n};\n\nexport default DifficultyWindow;\n","import React, {useState} from 'react';\nimport MyButton from \"../../../components/UI/button/button\";\nimport GameWindow from \"./game-window\";\nimport DifficultyWindow from \"./difficulty-window\";\n\nconst btnArr = [1, 2, 3, 4, 5, 6];\n\nconst AudioMain = () => {\n  const [startGame, setStartGame] = useState<boolean>(false);\n  const [difficulty, setDifficulty] = useState<number>(0);\n\n  function difficultyHandle(el: number) {\n    setDifficulty(el);\n    setStartGame(true)\n  }\n\n  return (\n      <div>\n        {startGame\n            && <GameWindow diff={difficulty - 1}/>\n        }\n        <div style={{display: startGame ? 'none' : 'flex'}} className='main-window blur'>\n        </div>\n        <DifficultyWindow visible={!startGame} children={\n          <div className='btn-wrapper'>\n          {btnArr.map(el => <MyButton key={el}\n                                      onClick={() => difficultyHandle(el)}\n                                      className='btn audio'\n                                      visible={true}>{el}</MyButton>)}\n        </div>}/>\n      </div>\n  );\n};\n\n\n\nexport default AudioMain;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport AudioMain from \"./audio-main\";\nimport MyButton from '../../../components/UI/button/button';\nimport './audio-call.css'\n\nconst AudioCall = () => {\n  return (\n      <div>\n        <AudioMain/>\n        <Link to='/'><MyButton className={'game-button'} visible={true}>X</MyButton>\n        </Link>\n      </div>\n  );\n};\n\n\n\nexport default AudioCall;\n"],"names":["useFetching","callback","useState","error","setError","isLoading","setIsLoading","fetching","message","diff","words","setWords","uniqueWords","setUniqueWords","randomWords","setRandomWords","answers","setAnswers","targetAnswer","setTargetAnswer","barTitle","setBarTitle","animationTime","setAnimationTime","animation","setAnimation","endGame","setEndGame","score","setScore","createRandomWords","randomAudios","array","random","getRandomElement","length","randomWord","splice","push","wordTranslate","audio","playAudio","server","indexOf","shuffle","PostService","fetchWords","useEffect","ans","forEach","el","className","style","color","to","xlinkHref","sprite","src","glossaryLink","height","width","alt","map","cursor","onClick","voiceLink","word","transcription","correctAnswer","wrongAnswer","image","id","onAnimationEnd","display","answer","visible","children","btnArr","startGame","setStartGame","difficulty","setDifficulty","difficultyHandle"],"sourceRoot":""}
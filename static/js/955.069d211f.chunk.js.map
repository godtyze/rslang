{"version":3,"file":"static/js/955.069d211f.chunk.js","mappings":"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","sources":["components/navigation.tsx","components/UI/sound-icon/sound-icon.tsx","components/word-card/word-card.tsx","pages/glossary/word-list.tsx","components/UI/input/input.tsx","components/UI/pagination/pagination.tsx","components/UI/mySelect/mySelect.tsx","pages/glossary/glossary.tsx"],"sourcesContent":["import React from 'react';\nimport GameLink from \"../pages/main/game-link\";\nimport audioCallImg from \"../assets/png/speaker.png\";\nimport sprintImg from \"../assets/png/sprint.png\";\n\n\nconst Navigation: React.FC = () => {\n  return (\n      <nav className='header__nav nav'>\n        <GameLink\n            className=''\n            path='/audio-call'\n            img={audioCallImg}\n            width='50px'\n            height='50px'\n            name='Аудиовызов'\n        />\n        <GameLink\n            className=''\n            path='/sprint'\n            img={sprintImg}\n            width='100px'\n            height='60px'\n            name='Спринт'\n        />\n      </nav>\n  );\n};\n\nexport default Navigation;\n","import React from 'react';\r\nimport soundImg from '../../../assets/png/voice-icon.png';\r\nimport './sound-icon.css';\r\n\r\ntype VoiceIconProps = {\r\n  onClick: () => void;\r\n}\r\n\r\nconst SoundIcon: React.FC<VoiceIconProps> = ({onClick}) => {\r\n  return (\r\n    <>\r\n      <img className='sound'\r\n           onClick={onClick}\r\n           src={soundImg}\r\n           alt='sound-icon'/>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SoundIcon;","import React, {useState} from 'react';\nimport './word-card.css';\nimport {Word} from \"../../types/types\";\nimport {server} from \"../../consts/consts\";\nimport { FastAverageColor } from 'fast-average-color';\nimport SoundIcon from \"../UI/sound-icon/sound-icon\";\n\ntype wordCardProps = Omit<Word, 'id' | 'page' | 'group'>;\ntype averageColor = {\n  color: string;\n  isLight: boolean;\n}\n\nconst fac = new FastAverageColor();\n\nconst WordCard: React.FC<wordCardProps> = ({word,\n                                             image,\n                                             audio,\n                                             audioExample,\n                                             audioMeaning,\n                                             wordTranslate,\n                                             textMeaningTranslate,\n                                             textMeaning,\n                                             textExample,\n                                             transcription,\n                                             textExampleTranslate}) => {\n  const [averageColorData, setAverageColorData] = useState<averageColor>({ color: '', isLight: false });\n  fac.getColorAsync(`${server}${image}`).then(color => {\n    setAverageColorData({\n      color: color.rgb,\n      isLight: color.isLight,\n    });\n  });\n\n\n  const audioPlayer = new Audio();\n  const playWord = async (url: string, phase?: number) => {\n    audioPlayer.src = `${server}${url}`;\n    audioPlayer.load();\n    await audioPlayer.play();\n\n    let nextPhase: number;\n    let nextAudio: string;\n\n    if (phase === 1) {\n      nextPhase = 2;\n      nextAudio = audioMeaning;\n    }\n\n    if (phase === 2) {\n      nextPhase = 3;\n      nextAudio = audioExample;\n    }\n\n    if (phase === 3) {\n      return;\n    }\n\n    const playNext = () => {\n      audioPlayer.removeEventListener('ended', playNext);\n      playWord(nextAudio, nextPhase);\n    };\n\n    audioPlayer.addEventListener('ended', playNext);\n  };\n\n  return (\n    <div className='word__card card' style={{background: `${averageColorData.color}`}}>\n      <div className='card__main' style={{background: `url(${server}${image})`}}>\n        <div className='card__main-wrapper' style={{background: `linear-gradient(transparent, ${averageColorData.color})`}}>\n          <h3 className='card__header'>{word}</h3>\n          <div className='card__header-details'>\n            <span>{wordTranslate}</span>\n            <span>{transcription}</span>\n            <SoundIcon onClick={() => playWord(audio, 1)}/>\n          </div>\n        </div>\n      </div>\n      <div className='card__description'>\n        <div className='card__description-examples'>\n          <span dangerouslySetInnerHTML={{__html: textMeaning}}></span>\n          <span dangerouslySetInnerHTML={{__html: textExample}}></span>\n        </div>\n        <div className='card__description-translate'>\n          <span>{textMeaningTranslate}</span>\n          <span>{textExampleTranslate}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WordCard;","import React from 'react';\nimport {Word} from \"../../types/types\";\nimport WordCard from \"../../components/word-card/word-card\";\nimport './word-list.css';\n\ntype wordListProps = {\n  words: Array<Word>;\n}\n\nconst WordList: React.FC<wordListProps> = ({words}) => {\n  return (\n    <div className='word__cards'>\n      {words.map(word =>\n      <WordCard\n        key={word.word}\n        word={word.word}\n        image={word.image}\n        audio={word.audio}\n        audioMeaning={word.audioMeaning}\n        audioExample={word.audioExample}\n        textMeaning={word.textMeaning}\n        textExample={word.textExample}\n        transcription={word.transcription}\n        wordTranslate={word.wordTranslate}\n        textMeaningTranslate={word.textMeaningTranslate}\n        textExampleTranslate={word.textExampleTranslate}/>)}\n    </div>\n  );\n};\n\nexport default WordList;","import React from 'react';\n\ninterface inputProps {\n  name?: string;\n  value: string;\n  id?: string;\n  className: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onSubmit?: (e: React.FormEvent<HTMLInputElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;\n  type: string;\n  placeholder?: string;\n  autoComplete?: string;\n  autoFocus?: boolean\n  onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void\n}\n\nconst MyInput: React.FC<inputProps> = ({className,\n                                         type,\n                                         placeholder,\n                                         onChange,\n                                         name,\n                                         onBlur,\n                                         autoComplete,\n                                         onKeyDown,\n                                         id,\n                                         autoFocus,\n                                         value}) => {\n  const handleSubmit = (e:React.FormEvent<HTMLInputElement>) => {\n    e.preventDefault();\n  }\n  return (\n    <input onSubmit={handleSubmit}\n           id={id}\n           onBlur={onBlur}\n           name={name}\n           onChange={onChange}\n           className={className}\n           type={type}\n           onKeyDown={onKeyDown}\n           autoComplete={autoComplete}\n           autoFocus={autoFocus}\n           value={value}\n           placeholder={placeholder}>\n    </input>\n  );\n};\n\nexport default MyInput;\n","import React, {useState} from 'react';\nimport './pagination.css';\nimport MyButton from \"../button/button\";\nimport {useNavigate, useParams} from \"react-router-dom\";\nimport {glossaryParams} from \"../../../types/types\";\nimport MyInput from \"../input/input\";\n\ntype paginationProps = {\n  onClickNext: () => void;\n  onClickPrev: () => void;\n  onClickFirst: () => void;\n  onClickLast: () => void;\n  page: number;\n}\n\nconst Pagination: React.FC<paginationProps> = ({onClickFirst,\n                                                 onClickLast,\n                                                 onClickNext,\n                                                 onClickPrev,\n                                                 page}) => {\n  const { group } = useParams<glossaryParams>();\n  const navigate = useNavigate();\n\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [value, setValue] = useState<string>(`${page}`)\n\n  let previousPageValue = page;\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (+e.target.value <= 30 && e.target.value !== '0') setValue(e.target.value);\n  }\n\n  const onBlur = () => {\n    setEditMode(false);\n\n    if (!value) {\n      setValue(`${previousPageValue}`);\n      return;\n    }\n\n    if (+value !== previousPageValue) navigate(`/glossary/${group}/${value}`);\n  }\n\n  const onEnter = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.code === 'Enter' && editMode) {\n      setEditMode(false);\n\n      if (!value) {\n        setValue(`${previousPageValue}`);\n        return;\n      }\n\n      if (+value !== previousPageValue) navigate(`/glossary/${group}/${value}`);\n    }\n  }\n\n  return (\n    <div className='pagination'>\n      <MyButton\n        className={page === 1 ? 'arr-wrapper disabled-btn' : 'arr-wrapper'}\n        visible={true}\n        onClick={onClickFirst}>&lt;&lt;</MyButton>\n      <MyButton\n        className={page === 1 ? 'arr-wrapper disabled-btn' : 'arr-wrapper'}\n        visible={true}\n        onClick={onClickPrev}>&lt;</MyButton>\n      {!editMode &&\n          <label\n              htmlFor='page'\n              onClick={() => setEditMode(true)}\n              className='arr-wrapper page'>\n            {value}\n          </label>}\n      {editMode && <MyInput\n        type='text'\n        id='page'\n        className='arr-wrapper page'\n        value={value}\n        onChange={onChange}\n        onBlur={onBlur}\n        autoFocus={true}\n        onKeyDown={onEnter}\n        autoComplete='off'\n        ></MyInput>}\n      <MyButton\n        className={page === 30 ? 'arr-wrapper disabled-btn' : 'arr-wrapper'}\n        visible={true}\n        onClick={onClickNext}>&gt;</MyButton>\n      <MyButton\n        className={page === 30 ? 'arr-wrapper disabled-btn' : 'arr-wrapper'}\n        visible={true}\n        onClick={onClickLast}>&gt;&gt;</MyButton>\n    </div>\n  );\n};\n\nexport default Pagination;","import React, {useState} from 'react';\nimport './mySelect.css';\nimport { FaCaretDown } from 'react-icons/fa';\n\ntype selectProps = {\n  onSelect: (group: number) => void;\n  selectedGroup: number;\n}\n\nconst MySelect: React.FC<selectProps> = ({onSelect, selectedGroup}) => {\n  const [isActive, setIsActive] = useState(false);\n  const options = [1, 2, 3, 4, 5, 6];\n  return (\n    <div className=\"dropdown\">\n      <div className=\"dropdown-btn\" onClick={() => setIsActive(!isActive)}>\n        {selectedGroup} группа слов\n        <FaCaretDown/>\n      </div>\n      {isActive && (\n        <div className=\"dropdown-content\">\n          {options.map((option) => (\n            <div\n              key={option}\n              onClick={() => {\n                onSelect(option);\n                setIsActive(false);\n              }}\n              className=\"dropdown-item\"\n            >\n              {option} группа слов\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MySelect;","import React, {useEffect} from 'react';\nimport './glossary.css';\nimport Header from \"../../components/header/header\";\nimport {Link, useNavigate, useParams} from \"react-router-dom\";\nimport sprite from '../../assets/svg/sprite.svg';\nimport Navigation from \"../../components/navigation\";\nimport WordList from \"./word-list\";\nimport {glossaryParams} from \"../../types/types\";\nimport Pagination from \"../../components/UI/pagination/pagination\";\nimport Footer from \"../../components/footer/footer\";\nimport MySelect from \"../../components/UI/mySelect/mySelect\";\nimport Loader from \"../../components/Loader/loader\";\nimport {useAppSelector} from \"../../hooks/redux\";\nimport {useActions} from \"../../hooks/useActions\";\n\n\nconst Glossary: React.FC = () => {\n  const {words, isLoading, currentGroup, currentPage} = useAppSelector(state => state.glossaryReducer);\n  const {setPage, setGroup, loadWords} = useActions();\n  const {group, page} = useParams<glossaryParams>();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (isNaN(Number(group)) || isNaN(Number(page))) {\n      navigate('/glossary/1/1');\n      return;\n    }\n\n    if (group && page && (+group > 6 || +page < 1 || +page > 30)) {\n      navigate('/glossary/1/1');\n      return;\n    }\n\n    if (group && page) {\n      setGroup(+group);\n      setPage(+page);\n      loadWords(+group - 1, +page - 1);\n    }\n  }, [group, page]);\n\n  return (\n    <div className='App glossary'>\n      <Header className='header glossary'>\n        <Link to='/'>\n          <svg className='header__link-icon'>\n            <use xlinkHref={`${sprite}#home-icon`}/>\n          </svg>\n        </Link>\n        <Navigation/>\n      </Header>\n      <div className='words__wrapper'>\n        {isLoading\n          ? <Loader/>\n          : page && group && <div className='word__list'>\n          <MySelect onSelect={(group: number) => {\n            setGroup(group);\n            navigate(`/glossary/${group}/1`);\n          }} selectedGroup={+group}/>\n          <WordList words={words}/>\n          <Pagination\n            page={currentPage}\n            onClickNext={() => {\n              setPage(currentPage + 1);\n              navigate(`/glossary/${currentGroup}/${currentPage + 1}`);\n            }}\n            onClickPrev={() => {\n              setPage(currentPage - 1);\n              navigate(`/glossary/${currentGroup}/${currentPage - 1}`);\n            }}\n            onClickFirst={() => {\n              setPage(1);\n              navigate(`/glossary/${currentGroup}/1`);\n            }}\n            onClickLast={() => {\n              setPage(30);\n              navigate(`/glossary/${currentGroup}/30`);\n            }}\n          />\n        </div>\n        }\n      </div>\n      <Footer/>\n    </div>\n  );\n};\n\nexport default Glossary;\n"],"names":["className","path","img","audioCallImg","width","height","name","sprintImg","onClick","src","soundImg","alt","fac","FastAverageColor","word","image","audio","audioExample","audioMeaning","wordTranslate","textMeaningTranslate","textMeaning","textExample","transcription","textExampleTranslate","useState","color","isLight","averageColorData","setAverageColorData","getColorAsync","server","then","rgb","audioPlayer","Audio","playWord","url","phase","load","play","nextPhase","nextAudio","playNext","removeEventListener","addEventListener","style","background","dangerouslySetInnerHTML","__html","words","map","type","placeholder","onChange","onBlur","autoComplete","onKeyDown","id","autoFocus","value","onSubmit","e","preventDefault","onClickFirst","onClickLast","onClickNext","onClickPrev","page","group","useParams","navigate","useNavigate","editMode","setEditMode","setValue","previousPageValue","visible","htmlFor","target","code","onSelect","selectedGroup","isActive","setIsActive","option","useAppSelector","state","glossaryReducer","isLoading","currentGroup","currentPage","useActions","setPage","setGroup","loadWords","useEffect","isNaN","Number","to","xlinkHref","sprite"],"sourceRoot":""}